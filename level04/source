#include <stdio.h>
#include <unistd.h>
#include <sys/ptrace.h>
#include <sys/wait.h>
#include <signal.h>
#include <sys/types.h>
// #include <linux/prctl.h>

// void enable_timeout_cons(void)
// {
// 	signal(0xe, prog_timeout);
// 	alarm(0x3c);
// 	return;
// }


int		main(void)
{
	char	buff[128];
	pid_t 	pid;
	int		status;
	int		state;

	pid = fork();
	bzero(buff, sizeof(buff));
	status = 0;
	state = 0;
	if (pid == 0)   // if we are on the child process
	{
		prctl(1, 1);
		ptrace(PT_TRACE_ME, 0, 0, 0);
		puts("Give me some shellcode, k");
		gets(buff);
	}
	else // parent gets the child process id 
	{
		do {
			wait(&status);  // block parent process until any of its children has finished.
			if (((status & _WSTOPPED) == 0) || (((state & 0x7f) + 1) >> 1) > 0) {
				puts("child is exiting...");
				return 0;
			}
			state = ptrace(PT_READ_U, pid, 0x2c, 0);
		} while (state != 0xb);   // PT_DETACH       11      /* stop tracing a process */
		puts("no exec() for you");
		kill(pid, 9);
	}
	return 0;
}
