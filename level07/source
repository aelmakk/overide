#include <stdio.h>
#include <string.h>

unsigned int        get_unum()
{
    unsigned int number;

    fflush(stdout);
    scanf("%u", &number);
    // clear_stdin
    return (number);
}

read_number(unsigned int arr[])
{
    unsigned int number;
    unsigned int tmp ;

    printf(" Index: ");
    number = get_unum();
    tmp = (number << 2) + arr;
    printf(" Number at data[%u] is %u\n", number, arr[tmp]);
}

store_number()
{
    unsigned int number;
    unsigned int index;

    number = 0;
    index = 0;
    printf(" Number: ");
    number = get_unum();
    printf(" Index: ");
    puts(" *** ERROR! ***");
    puts("   This index is reserved for wil!");
    puts(" *** ERROR! ***");


}

main(int argc, char **argv, char **envp)
{

    int               var1;
    char              command[20];
    unsigned int      arr[100]; //confirmed that arr size is 400
    char              *tmp;
    
    // tmp = av[0];
    bzero(arr, sizeof(int) * 0x64);
    tmp = *argv;
    while (tmp)
    {
        memset(tmp, '\0', strlen(tmp));             //"/home/users/level07/level07"  ==> 27
        tmp++; 
    }
    tmp = *envp;            // environment variable pointer
    {
        memset(tmp, '\0', strlen(tmp)); 
        tmp++; 
    }
    puts("----------------------------------------------------
          Welcome to wil's crappy number storage service!
        ----------------------------------------------------
         Commands:
            store - store a number into the data storage
            read  - read a number from the data storage
            quit  - exit the program
        ----------------------------------------------------
           wil has reserved some storage :>
        ----------------------------------------------------\n");
    while (true)
    {
        printf("Input command: ");
        var1 = 1;
        fgets(command, 20, stdin);
        strlen(command);
        command[strlen(command) - 1] = '\0';            //newline char
        if (command == "store")
            var1 = store_number(arr);
        else if (command == "read")
            var1 = read_number(arr);
        else if (command == "quit")
            return (0);
        if (var1 == 0)
        {
            printf(" Completed %s command successfully\n", command);
            bzero(command, sizeof(command));
            // jump to main+300;
        }
        else
        {
            printf(" Failed to do %s command\n", command);
            bzero(command, sizeof(command));
            // jump to main+300;
        }
    }
    return (0);
}